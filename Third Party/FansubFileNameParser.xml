<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FansubFileNameParser</name>
    </assembly>
    <members>
        <member name="T:FansubFileNameParser.FansubFile">
            <summary>
            Represents a media file that was produced by a Fansub group
            </summary>
        </member>
        <member name="M:FansubFileNameParser.FansubFile.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Constructs a new immutable FansubFile object. You almost certainly won't be constructing these yourself. 
            <seealso cref="T:FansubFileNameParser.FansubFileParsers"/>
            </summary>
            <param name="fansubGroup">The fansub group name</param>
            <param name="seriesName">The anime series name</param>
            <param name="episodeNumber">
            The episode number. If this isn't applicable, then <see cref="F:System.Int32.MinValue"/> should be used
            </param>
            <param name="extension">The file extension</param>
        </member>
        <member name="M:FansubFileNameParser.FansubFile.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a <see cref="T:FansubFileNameParser.FansubFile"/> based on the streaming
            </summary>
            <param name="streamingInfo">The serialization info object</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:FansubFileNameParser.FansubFile.DeepCopy">
            <summary>
            Makes a deep opy this <see cref="T:FansubFileNameParser.FansubFile"/>.
            </summary>
            <returns>A fresh <see cref="T:FansubFileNameParser.FansubFile"/>.</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFile.Equals(System.Object)">
            <summary>
            Determines if an object is equal to this <see cref="T:FansubFileNameParser.FansubFile"/>.
            </summary>
            <param name="right">The other object.</param>
            <returns>True if they are equal. False otherwise.</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFile.Equals(FansubFileNameParser.FansubFile)">
            <summary>
            Determines whether two FansubFiles are equal
            </summary>
            <param name="other">The other FansubFile</param>
            <returns>True if the files are equal. False otherwise</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFile.GetHashCode">
            <summary>
            Get the hash code of this file
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFile.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFile.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the data used for serializing this object
            </summary>
            <param name="info">The serialization info object</param>
            <param name="context">The streaming context for this object</param>
        </member>
        <member name="P:FansubFileNameParser.FansubFile.FansubGroup">
            <summary>
            The name of the fansub group
            </summary>
        </member>
        <member name="P:FansubFileNameParser.FansubFile.SeriesName">
            <summary>
            The name of the anime series
            </summary>
        </member>
        <member name="P:FansubFileNameParser.FansubFile.EpisodeNumber">
            <summary>
            The episode number
            </summary>
        </member>
        <member name="P:FansubFileNameParser.FansubFile.Extension">
            <summary>
            The file extension of the media file
            </summary>
        </member>
        <member name="T:FansubFileNameParser.FansubFileParsers">
            <summary>
            A static factory class that parses file names (without the full path) and returns a <see cref="T:FansubFileNameParser.FansubFile"/>
            </summary>
        </member>
        <member name="F:FansubFileNameParser.FansubFileParsers.NormalizedFileNameParser">
            <summary>
            A static parser that accepts normalized file names
            </summary>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.RemoveEndTags(System.String)">
            <summary>
            Attempts to chop off all the tags at the end of a file name
            </summary>
            <param name="fileName">The file name</param>
            <returns>A string with all of the tags removed</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.RemoveFansubTag(System.String)">
            <summary>
            Attempts to chop off the front Fansub group tag of the file name
            </summary>
            <param name="fileName">The file name</param>
            <returns>A string with the front fansub tag chopped off</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.RemoveVersionNumber(System.String)">
            <summary>
            Attempts to remove the version number after the episode number.
            
            This is a bit trickier because there doesn't necessarily need to be a space between the 
            episode number and the version number. Furthermore, if the version number is within
            an end-tag, we won't be able to detect it.
            
            So, in order to accomplish this, we will reverse the string and look for digits followed by 
            the letter 'v'
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.RemoveAllTagsAndExtension(System.String)">
            <summary>
            Attempts to remove all tags and the extension from the file name. It will also remove the version number
            of the file "v*"
            </summary>
            <param name="fileName">The file name</param>
            <returns>A string with the front fansub tag and the leading tags removed</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.TryParseFansubFile(System.String,FansubFileNameParser.FansubFile@)">
            <summary>
            Tries the parse fansub file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fansubFile">The fansub file.</param>
            <returns>True if the parse was successful. False otherwise.</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.ParseFansubFile(System.String)">
            <summary>
            Parse a file name that corresponds to one of the common fansub naming formats. 
            
            These naming formats are entirely idiosyncratic, so there's no formal grammar available.
            </summary>
            <param name="fileName">The file name, without the full path</param>
            <returns>A <see cref="T:FansubFileNameParser.FansubFile"/> with all of the parsable information</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.GetFansubGroup(System.String)">
            <summary>
            Attempts to get the fansub group from the file name.
            </summary>
            <param name="fileName">The file name (not full path)</param>
            <returns>The fansub group name</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.GetEpisodeNumber(System.String)">
            <summary>
            Attempts to get the episode number. Returns int.MinValue if it couldn't find it.
            </summary>
            <remarks>
            Works exactly the same as GetAnimeSeries, except that it goes for the complete opposite. It'll first try
            to separate out everything by dashes and detect the last element to see if it's a number. Otherwise, it
            will separate everything out by spaces and see if the last element is a number. If both of these methods
            fail, then we return int.MinValue
            </remarks>
            <param name="fileName">The file name (not full path)</param>
            <returns>The episode number; int.MinValue if it couldn't find it</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.TryGetEpisodeNumberUsingSpaceDelimination(System.String,System.Int32@)">
            <summary>
            Attempts to get the episode number by splitting the string by spaces and assuming the last number is the episode number
            </summary>
            <param name="fileNameNoTagsUnderscoresVersionNumber">The file name</param>
            <param name="episodeNumber">The reference where we write the episode number to</param>
            <returns>Whether or not this method succeeded</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.TryGetEpisodeNumberUsingDashDelimination(System.String,System.Int32@)">
            <summary>
            Attempts to get the episode number by splitting the string by dashes and assuming the last number is the episode number
            </summary>
            <param name="fileNameNoTagsUnderscoresVerNumber">The file name</param>
            <param name="episodeNumber">The reference where we write the episode number to</param>
            <returns>Whether or not this method succeeded</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.GetAnimeSeriesName(System.String)">
            <summary>
            Attempts to get the anime series name. Returns string.Empty if it couldn't find it.
            </summary>
            <remarks>
            
            Works by:
            1. Chopping off the end tags
            2. Chopping off the Fansub group name
            3. Remove underscores
            4. Check against the most common deliminator: the dash ("-")
            5. If we are able to deliminate the file name by the dash and parse an integer at the end, we'll 
            assume that everything before it was a part of the anime series name
            6. Otherwise, if the file name cannot be deliminated by a dash or we couldn't parse an integer 
            at the end, then we'll have to split on the spaces after trimming the file name
            7. And then we assume that the last contiguous set of strings is the digit. If this turns out to be false, then 
            we simply just re-concatonate everything back together and return that
            
            </remarks>
            <param name="fileName">The file name (not full path)</param>
            <returns>The anime series name</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.TryGetSeriesNameUsingDashDelimination(System.String,System.String@)">
            <summary>
            Helper function for <see cref="M:FansubFileNameParser.FansubFileParsers.GetAnimeSeriesName(System.String)"/>. 
            </summary>
            <param name="fileNameNoTagsUnderscoresVersionNumber">File name</param>
            <param name="seriesName">The reference we should write the result to</param>
            <returns>Whether this worked or not</returns>
        </member>
        <member name="M:FansubFileNameParser.FansubFileParsers.TryGetSeriesNameUsingSpaceDelimination(System.String,System.String@)">
            <summary>
            Helper function for <see cref="M:FansubFileNameParser.FansubFileParsers.GetAnimeSeriesName(System.String)"/>. This is different in that we use straight up string manipulation
            instead of any parsers
            </summary>
            <param name="fileNameNoTagsUnderscoresVersionNumber">File name</param>
            <param name="seriesName">The reference we should write the result to</param>
            <returns>Whether this worked or not</returns>
        </member>
        <member name="T:FansubFileNameParser.Metadata.AudioCodec">
            <summary>
            Represents the audio codec used to encode the audio stream of a media file
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.AudioCodec.Unknown">
            <summary>
            Designates the default and unknown audio codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.AudioCodec.AAC">
            <summary>
            The AAC audio codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.AudioCodec.AC3">
            <summary>
            The AC3 audio codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.AudioCodec.DTS">
            <summary>
            The DTS audio codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.AudioCodec.FLAC">
            <summary>
            The FLAC audio codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.AudioCodec.MP3">
            <summary>
            The MP3 audio codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.AudioCodec.OGG">
            <summary>
            The OGG audio codec
            </summary>
        </member>
        <member name="T:FansubFileNameParser.Metadata.MediaMetadata">
            <summary>
            Represents the media metadata that is encoded into a fansub file name
            </summary>
        </member>
        <member name="M:FansubFileNameParser.Metadata.MediaMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FansubFileNameParser.Metadata.MediaMetadata"/> class.
            </summary>
        </member>
        <member name="M:FansubFileNameParser.Metadata.MediaMetadata.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FansubFileNameParser.Metadata.MediaMetadata.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FansubFileNameParser.Metadata.MediaMetadata.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FansubFileNameParser.Metadata.MediaMetadata.Equals(FansubFileNameParser.Metadata.MediaMetadata)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:FansubFileNameParser.Metadata.MediaMetadata.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="P:FansubFileNameParser.Metadata.MediaMetadata.AudioCodec">
            <summary>
            Gets or sets the audio codec.
            
            Audio Codec equates to "AAC," FLAC," "DTS," etc...
            </summary>
            <value>
            The audio codec.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.MediaMetadata.CRC32">
            <summary>
            Gets or sets the CRC32 Checksum
            </summary>
            <value>
            The CRC32 Checksum.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.MediaMetadata.PixelBitDepth">
            <summary>
            Gets or sets the Pixel bit depth.
            
            Pixel Bit Depth equates to "8 bit" or "10 bit"
            </summary>
            <value>
            The pixel bit depth.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.MediaMetadata.Resolution">
            <summary>
            Gets or sets the resolution.
            
            Resolution equates to "1280x720," "1920x1080," etc...
            </summary>
            <value>
            The resolution.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.MediaMetadata.VideoCodec">
            <summary>
            Gets or sets the video codec.
            
            Video Codec equates to "H264," "XVID," etc...
            </summary>
            <value>
            The video codec.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.MediaMetadata.VideoMedia">
            <summary>
            Gets or sets the video media. 
            
            Video Media equates to either "TV," "Bluray," "BD," "DVD," etc...
            </summary>
            <value>
            The video media.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.MediaMetadata.VideoMode">
            <summary>
            Gets or sets the video mode. 
            
            Video Mode equates to either "1080p," "720p," "480p," etc...
            </summary>
            <value>
            The video mode.
            </value>
        </member>
        <member name="T:FansubFileNameParser.Metadata.MediaMetadataParser">
            <summary>
            Parses media metadata from the file name tags
            </summary>
        </member>
        <member name="M:FansubFileNameParser.Metadata.MediaMetadataParser.TryParseMediaMetadata(System.String,FansubFileNameParser.Metadata.MediaMetadata@)">
            <summary>
            Tries the parse media metadata.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="metadata">The metadata.</param>
            <returns>True if any media metadata could be parsed. False otherwise</returns>
        </member>
        <member name="T:FansubFileNameParser.MediaMetadataTags">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.AAC">
            <summary>
              Looks up a localized string similar to AAC.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.AC3">
            <summary>
              Looks up a localized string similar to AC3.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.BD">
            <summary>
              Looks up a localized string similar to BD.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.BDRIP">
            <summary>
              Looks up a localized string similar to BDRIP.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.BLURAY">
            <summary>
              Looks up a localized string similar to BLURAY.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.DTS">
            <summary>
              Looks up a localized string similar to DTS.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.DVD">
            <summary>
              Looks up a localized string similar to DVD.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.DVDRIP">
            <summary>
              Looks up a localized string similar to DVDRIP.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.EightBit">
            <summary>
              Looks up a localized string similar to 8BIT.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.EightBitWithSpace">
            <summary>
              Looks up a localized string similar to 8 BIT.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.FLAC">
            <summary>
              Looks up a localized string similar to FLAC.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.FourEightIWithSpace">
            <summary>
              Looks up a localized string similar to 480 I.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.FourEightyI">
            <summary>
              Looks up a localized string similar to 480I.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.FourEightyP">
            <summary>
              Looks up a localized string similar to 480P.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.H264">
            <summary>
              Looks up a localized string similar to H264.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.Hi10P">
            <summary>
              Looks up a localized string similar to HI10P.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.MP3">
            <summary>
              Looks up a localized string similar to MP3.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.OGG">
            <summary>
              Looks up a localized string similar to OGG.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.SevenTwentyP">
            <summary>
              Looks up a localized string similar to 720P.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.TenBit">
            <summary>
              Looks up a localized string similar to 10BIT.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.TenBitWithSpace">
            <summary>
              Looks up a localized string similar to 10 BIT.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.TenEightyI">
            <summary>
              Looks up a localized string similar to 1080I.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.TenEightyIWithSpace">
            <summary>
              Looks up a localized string similar to 1080 I.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.TenEightyP">
            <summary>
              Looks up a localized string similar to 1080P.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.TV">
            <summary>
              Looks up a localized string similar to TV.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.VC1">
            <summary>
              Looks up a localized string similar to VC1.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.X264">
            <summary>
              Looks up a localized string similar to X264.
            </summary>
        </member>
        <member name="P:FansubFileNameParser.MediaMetadataTags.XVID">
            <summary>
              Looks up a localized string similar to XVID.
            </summary>
        </member>
        <member name="T:FansubFileNameParser.Metadata.PixelBitDepth">
            <summary>
            Represents the pixel bit-depth of a media file
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.PixelBitDepth.Unknown">
            <summary>
            The default pixel bit-depth of any color space
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.PixelBitDepth.EightBits">
            <summary>
            Designates eight bits of pixel depth
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.PixelBitDepth.TenBits">
            <summary>
            Designates ten bits of pixel depth
            </summary>
        </member>
        <member name="T:FansubFileNameParser.Metadata.Resolution">
            <summary>
            Represents the resolution of a media file
            </summary>
        </member>
        <member name="M:FansubFileNameParser.Metadata.Resolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FansubFileNameParser.Metadata.Resolution"/> class with  width = 0 and height = 0
            </summary>
        </member>
        <member name="M:FansubFileNameParser.Metadata.Resolution.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FansubFileNameParser.Metadata.Resolution"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FansubFileNameParser.Metadata.Resolution.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:FansubFileNameParser.Metadata.Resolution.Equals(FansubFileNameParser.Metadata.Resolution)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:FansubFileNameParser.Metadata.Resolution.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:FansubFileNameParser.Metadata.Resolution.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:FansubFileNameParser.Metadata.Resolution.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="P:FansubFileNameParser.Metadata.Resolution.Width">
            <summary>
            Gets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.Resolution.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:FansubFileNameParser.Metadata.Tags">
            <summary>
            A collection of media metadata tags
            </summary>
        </member>
        <member name="P:FansubFileNameParser.Metadata.Tags.AudioTags">
            <summary>
            Gets the audio tags.
            </summary>
            <value>
            The audio tags.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.Tags.PixelBitDepthTags">
            <summary>
            Gets the pixel bit depth tags.
            </summary>
            <value>
            The pixel bit depth tags.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.Tags.VideoCodecTags">
            <summary>
            Gets the video codec tags.
            </summary>
            <value>
            The video codec tags.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.Tags.VideoMediaTags">
            <summary>
            Gets the video media tags.
            </summary>
            <value>
            The video media tags.
            </value>
        </member>
        <member name="P:FansubFileNameParser.Metadata.Tags.VideoModeTags">
            <summary>
            Gets the video mode tags.
            </summary>
            <value>
            The video mode tags.
            </value>
        </member>
        <member name="T:FansubFileNameParser.Metadata.VideoCodec">
            <summary>
            Represents the video codec used to encode the media
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoCodec.Unknown">
            <summary>
            The default video codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoCodec.H264">
            <summary>
            The H264 video codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoCodec.XVID">
            <summary>
            The XVID video codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoCodec.VC1">
            <summary>
            The VC1 video codec
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoCodec.VP8">
            <summary>
            The VP8 video codec
            </summary>
        </member>
        <member name="T:FansubFileNameParser.Metadata.VideoMedia">
            <summary>
            Represents the medium that was used to get the media data
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMedia.Unknown">
            <summary>
            The default video media. 
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMedia.Bluray">
            <summary>
            Designates media taken from a Bluray disk
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMedia.Broadcast">
            <summary>
            Designates media taken from a TV broadcast
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMedia.DVD">
            <summary>
            Designates media taken from a DVD 
            </summary>
        </member>
        <member name="T:FansubFileNameParser.Metadata.VideoMode">
            <summary>
            Represents the video mode used, such as "1080p," "720p," "480p," etc...
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMode.Unknown">
            <summary>
            The default video mode
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMode.FourEightyInterlaced">
            <summary>
            Designates 480i video
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMode.FourEightyProgressive">
            <summary>
            Designates 480p video
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMode.FiveSeventySixInterlaced">
            <summary>
            Designates 576i video
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMode.SevenTwentyProgressive">
            <summary>
            Designates 720p video
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMode.TenEightyInterlaced">
            <summary>
            Designates 1080i video
            </summary>
        </member>
        <member name="F:FansubFileNameParser.Metadata.VideoMode.TenEightyProgressive">
            <summary>
            Designates 1080p video
            </summary>
        </member>
    </members>
</doc>
